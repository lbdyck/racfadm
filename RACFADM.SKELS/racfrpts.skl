)CM*------------------------------------------------------------------*
)CM*  Purpose:  RACFADM - RACF Reports - All reports
)CM*------------------------------------------------------------------*
)CM*  FLG  YYMMDD  USERID   DESCRIPTION
)CM*  ---  ------  -------  ------------------------------------------
)CM*  @A4  200619  RACFA    Chged var. SETDRPTU to TMPDRPTU
)CM*  @A3  200619  SLBD     Support multiple reports in one job
)CM*  @A2  200618  RACFA    Removed JOB card, moved to seperate member
)CM*  @A1  200618  RACFA    Fix rpt 200H, chg SCHEDULED to 462, was 471
)CM*  @A0  200617  RACFA    Created skeleton
)CM*------------------------------------------------------------------*
)DOT &TABLEA
)SEL &DOIT EQ *
)SEL &REC NE 100C AND &REC NE 400A AND &REC NE 400B AND &REC < 900
//*-------------------------------------------------------------------*
//*                           RACF Reports
//*-------------------------------------------------------------------*
//* Extract generic, data set, and group data from RACF IRRDBU00
//* Select generic classes and sort them by CLASS and PROFILE
//*-------------------------------------------------------------------*
//* z/OS Security Server RACF Security Administrator's Guide SA23-2289
//* z/OS Security Server RACF Macros and Interfaces SA23-2288
//*-------------------------------------------------------------------*
)SETF NAME = &LEFT(&NAME,8, )
//&NAME EXEC PGM=ICETOOL,REGION=0M,PARM='MSGPRT=ALL'
//DBUDATA  DD  DISP=SHR,DSN=&TMPDRPTU
//SORTWK01 DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
//SORTWK02 DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
//SORTWK03 DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
//SORTWK04 DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DFSMSG   DD  SYSOUT=*
//TOOLMSG  DD  SYSOUT=*
//ADUDATA  DD  DUMMY
//TOOLIN   DD  *
)ENDSEL
)SEL &REC = 100  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    100 (GPBD)
* Purpose: Group basic data
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP100) USING(L100)
  DISPLAY FROM(TEMP100) LIST(RPT100)            -
          BLANK                                 -
          TITLE('T100/GPBD - Group Basic Data') -
          DATE TIME PAGE                        -
          HEADER('Group') ON(10,8,CH)           -
          HEADER('Sup Group') ON(19,8,CH)       -
          HEADER('Owner') ON(39,8,CH)           -
          HEADER('Create Date ') ON(28,10,CH)   -
          HEADER('Description') ON(62,60,CH)
)ENDSEL
)SEL &REC = 100A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    100A (@CPRO)
* Purpose: Report the number of RACF profiles in the RACF database
*--------------------------------------------------------------------*
  COPY    FROM(DBUDATA)  TO(TEMP100A) USING(A100)
  OCCURS  FROM(TEMP100A) LIST(RPT100A)                           -
          PAGE                                                   -
          TITLE('CPRO: Number of Profiles in the RACF Database') -
          DATE(YMD/)                                             -
          TIME(12:)                                              -
          BLANK                                                  -
          ON(5,26,CH)   HEADER('Type')                           -
          ON(VALCNT)    HEADER('Count')
)ENDSEL
)SEL &REC = 100B | &REC = ALL
*--------------------------------------------------------------------*
* Name:    100B (@CUG$)
* Purpose: List the Universal group count
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP100B) USING(B100)
  OCCURS  FROM(TEMP100B) LIST(RPT100B)        -
          PAGE                                -
          TITLE('Universal Group Count')      -
          DATE(YMD/)                          -
          TIME(12:)                           -
          BLANK                               -
          ON(10,8,CH)    HEADER('Group Name') -
          ON(39,8,CH)    HEADER('Owner')      -
          ON(28,10,CH)   HEADER('Date')
)ENDSEL
)SEL &REC = 102  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    102 (#LMUG)
* Purpose: Group Members
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP102) USING(L102)
  DISPLAY FROM(TEMP102) LIST(RPT102)          -
          BLANK                               -
          TITLE('T102/GPMEM - Group Members') -
          DATE TIME PAGE                      -
          HEADER('User') ON(19,8,CH)          -
          HEADER('User Auth') ON(28,8,CH)     -
          BTITLE('Group :')                   -
          BREAK(10,8,CH)
)ENDSEL
)SEL &REC = 102A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    102A (@CONN)
* Purpose: Find all userids which have group privileges above USE
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP102A) USING(A102)
  DISPLAY FROM(TEMP102A) LIST(RPT102A)                            -
          PAGE                                                    -
          TITLE('CONN: User IDs With Group Privileges Above Use') -
          DATE(YMD/)                                              -
          TIME(12:)                                               -
          BLANK                                                   -
          ON(19,8,CH) HEADER('User ID')                           -
          ON(10,8,CH) HEADER('Group Name')                        -
          ON(28,8,CH) HEADER('Authority')
)ENDSEL
)SEL &REC = 120A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    120A (@GIDS)
* Purpose: Find all shared UNIX GIDs (those assigned to more than
*          one group)
*--------------------------------------------------------------------*
  COPY    FROM(DBUDATA)  TO(TEMP120A) USING(A120)
  OCCURS  FROM(TEMP120A) LIST(RPT120A)                 -
          PAGE                                         -
          TITLE('GIDS: UNIX GIDs Used More Than Once') -
          DATE(YMD/)                                   -
          TIME(12:)                                    -
          BLANK                                        -
          ON(19,10,CH) HEADER('UNIX GID')              -
          ON(VALCNT)   HEADER('Number of Times Used')  -
          HIGHER(1)
)ENDSEL
)SEL &REC = 200  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200 (USBD)
* Purpose: Userids basic data
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP200) USING(L200)
  DISPLAY FROM(TEMP200) LIST(RPT200)           -
          BLANK                                -
          TITLE('T200/USBD - User Basic Data') -
          DATE TIME PAGE                       -
          HEADER('User') ON(10,8,CH)           -
          HEADER('Name') ON(79,20,CH)          -
          HEADER('DefGrp') ON(100,8,CH)        -
          HEADER('Create Data') ON(19,10,CH)   -
          HEADER('Logon Date') ON(118,10,CH)   -
          HEADER('Revoke Date') ON(462,10,CH)  -
          HEADER('Owner') ON(30,8,CH)          -
          HEADER('Spec') ON(44,4,CH)           -
          HEADER('Oper') ON(49,4,CH)           -
          HEADER('Revoke') ON(54,4,CH)
)ENDSEL
)SEL &REC = 200A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200A (@NPWI)
* Purpose: Userids with NOINTERVAL specified
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP200A) USING(A200)
  DISPLAY FROM(TEMP200A) LIST(RPT200A)                     -
          PAGE                                             -
          TITLE('NPWI User IDs with NOINTERVAL Specified') -
          DATE(YMD/)                                       -
          TIME(12:)                                        -
          BLANK                                            -
          ON(10,8,CH)   HEADER('User ID')                  -
          ON(30,8,CH)   HEADER('Owner')                    -
          ON(19,10,CH)  HEADER('Created')                  -
          ON(44,4,CH)   HEADER('Special')                  -
          ON(49,4,CH)   HEADER('Operations')               -
          ON(390,4,CH)  HEADER('Auditor')
)ENDSEL
)SEL &REC = 200B | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200B (@UGLB)
* Purpose: Find all of the user IDs which have extraordinary RACF
*          privileges, such as SPECIAL, OPERATIONS, and AUDITOR
*          at the system level
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP200B) USING(B200)
  DISPLAY FROM(TEMP200B) LIST(RPT200B)                        -
          PAGE                                                -
          TITLE('UGLB: Users with Extraordinary Authorities') -
          DATE(YMD/)                                          -
          TIME(12:)                                           -
          BLANK                                               -
          ON(10,8,CH)  HEADER('User ID')                      -
          ON(79,20,CH) HEADER('User Name')                    -
          ON(44,4,CH)  HEADER('Special')                      -
          ON(49,4,CH)  HEADER('Operations')                   -
          ON(54,3,CH)  HEADER('Revoked')                      -
          ON(390,4,CH) HEADER('Auditor')                      -
          ON(638,4,CH) HEADER('Read-only Auditor')
)ENDSEL
)SEL &REC = 200C | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200C (@UL90)
* Purpose: Find all of the user IDs which have been defined in the
*          past 90 days
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP200C) USING(C200)
  DISPLAY FROM(TEMP200C) LIST(RPT200C)                        -
          PAGE                                                -
          TITLE('UL90: User IDs defined in the past 90 days') -
          DATE(YMD/)                                          -
          TIME(12:)                                           -
          BLANK                                               -
          ON(19,10,CH)  HEADER('Date')                        -
          ON(10,8,CH)   HEADER('User ID')                     -
          ON(30,8,CH)   HEADER('Owner')                       -
          ON(44,4,CH)   HEADER('Special')                     -
          ON(49,4,CH)   HEADER('Operations')                  -
          ON(390,4,CH)  HEADER('Auditor')                     -
          ON(118,10,CH) HEADER('Last Date')                   -
          ON(109,8,CH)  HEADER('Last Time')
)ENDSEL
)SEL &REC = 200D | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200D (@UVRK)
* Purpose: Find all of the user IDs which are currently revoked.
* Note:    Only those IDs which have the REVOKED flag set in the
*          RACF database are identified.  IDs which will become
*          revoked at the next use are not found with this
*          selection criteria
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP200D) USING(D200)
  DISPLAY FROM(TEMP200D) LIST(RPT200D)                        -
          PAGE                                                -
          TITLE('URVK: User IDs Which are Currently Revoked') -
          DATE(YMD/)                                          -
          TIME(12:)                                           -
          BLANK                                               -
          ON(10,8,CH)  HEADER('User ID')                      -
          ON(79,20,CH) HEADER('User Name')
)ENDSEL
)SEL &REC = 200E | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200E (ICE50)
* Purpose: Report all userids who have a 'PASSDATE=00.000'
*--------------------------------------------------------------------*
  COPY    FROM(DBUDATA)  TO(TEMP200E) USING(E200)
  DISPLAY FROM(TEMP200E) LIST(RPT200E)                         -
          PAGE                                                 -
          TITLE('USERIDS WHICH HAVE NULL LAST PASSWORD DATES') -
          DATE(YMD/)                                           -
          TIME(12:)                                            -
          BLANK                                                -
          ON(79,20,CH)  HEADER('USER NAME')                    -
          ON(10,8,CH)   HEADER('USERID')                       -
          ON(118,10,CH) HEADER('LAST ACCESS')                  -
          ON(19,10,CH)  HEADER('CREATED')                      -
          ON(54,4,CH)   HEADER('REVOKED?')                     -
          ON(100,8,CH)  HEADER('DEF. GROUP')
)ENDSEL
)SEL &REC = 200F | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200F (ICE58)
* Purpose: Report all userids who have non-expiring passwords
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP200F) USING(F200)
  DISPLAY FROM(TEMP200F) LIST(RPT200F)                 -
          PAGE                                         -
          TITLE('USERIDS WITH NON-EXPIRING PASSWORDS') -
          DATE(YMD/)                                   -
          TIME(12:)                                    -
          BLANK                                        -
          ON(10,8,CH)     HEADER('USERID')             -
          ON(79,20,CH)    HEADER('USER NAME')          -
          ON(100,8,CH)    HEADER('DEF GRP')            -
          ON(118,10,CH)   HEADER('LAST INIT')          -
          ON(54,4,CH)     HEADER('REVOKED?')           -
          ON(129,34,CH)   HEADER('INST DATA (1ST 34 CHARS)')
)ENDSEL
)SEL &REC = 200G | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200G (ICE64)
* Purpose: Report all userids that have never been used
*--------------------------------------------------------------------*
  COPY    FROM(DBUDATA)  TO(TEMP200G) USING(G200)
  DISPLAY FROM(TEMP200G) LIST(RPT200G)                 -
          PAGE                                         -
          TITLE('USER IDS WHICH HAVE NEVER BEEN USED') -
          DATE(YMD/)                                   -
          TIME(12:)                                    -
          BLANK                                        -
          ON(10,8,CH)    HEADER('USER ID')             -
          ON(79,20,CH)   HEADER('USER NAME')           -
          ON(19,10,CH)   HEADER('CREATED')             -
          ON(118,10,CH)  HEADER('LJ DATE')             -
          ON(54,4,CH)    HEADER('REVOKED?')            -
          ON(49,3,CH)    HEADER('OPER')                -
          ON(44,3,CH)    HEADER('SPEC')                -
          ON(390,3,CH)   HEADER('AUDT')
)ENDSEL
)SEL &REC = 200H | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200H (ICE56)
* Purpose: Report all userids who are revoked or a future revoke
*          date has been set
*--------------------------------------------------------------------*
  COPY    FROM(DBUDATA)  TO(TEMP200H) USING(H200)
  DISPLAY FROM(TEMP200H) LIST(RPT200H) -
          PAGE -
          TITLE('REVOKED USERIDS') -
          DATE(YMD/) -
          TIME(12:)  -
          BLANK      -
          ON(10,8,CH)   HEADER('USERID')   -
          ON(79,20,CH)  HEADER('NAME')     -
          ON(54,4,CH)   HEADER('REVOKED?') -
          ON(462,10,CH) HEADER('SCHEDULED')
)ENDSEL
)SEL &REC = 200I | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200I (ICE61)
* Purpose: Report all userids who have the 'uaudit' attributes set
*--------------------------------------------------------------------*
  COPY    FROM(DBUDATA)  TO(TEMP200I) USING(I200)
  DISPLAY FROM(TEMP200I) LIST(RPT200I)            -
          PAGE                                    -
          TITLE('USERIDS WITH "UAUDIT" ASSIGNED') -
          DATE(YMD/)                              -
          TIME(12:)                               -
          BLANK                                   -
          ON(10,8,CH)   HEADER('USERID')          -
          ON(79,20,CH)  HEADER('USER NAME')       -
          ON(118,10,CH) HEADER('LAST ACCESS')     -
          ON(19,10,CH)  HEADER('CREATED')         -
          ON(54,4,CH)   HEADER('REVOKED?')        -
          ON(49,3,CH)   HEADER('OPER')            -
          ON(44,3,CH)   HEADER('SPEC')            -
          ON(390,3,CH)  HEADER('AUDT')
)ENDSEL
)SEL &REC = 200J | &REC = ALL
*--------------------------------------------------------------------*
* Name:    200J (ICE74)
* Purpose: Report all userids that have a password interval not equal
*          to 60 days, will sort by interval value then userid
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP200J) USING(J200)
  DISPLAY FROM(TEMP200J) LIST(RPT200J)                   -
          PAGE                                           -
          TITLE('USERIDS WITH PASSWORD INTERVALS NE 60') -
          DATE(YMD/)                                     -
          TIME(12:)                                      -
          BLANK                                          -
          ON(10,8,CH)     HEADER('USERID')               -
          ON(79,20,CH)    HEADER('USER NAME')            -
          ON(100,8,CH)    HEADER('DEF GRP')              -
          ON(118,10,CH)   HEADER('LAST INIT')            -
          ON(64,3,CH)     HEADER('INTERVAL')             -
          ON(129,34,CH)   HEADER('INST DATA (1ST 34 CHARS)')
)ENDSEL
)SEL &REC = 205  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    205 (USCON)
* Purpose: Group connections
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP205) USING(L205)
  DISPLAY FROM(TEMP205) LIST(RPT205)              -
          BLANK                                   -
          TITLE('T205/USCON - Group Connections') -
          DATE TIME PAGE                          -
          HEADER('Group') ON(19,8,CH)             -
          HEADER('Owner') ON(39,8,CH)             -
          HEADER('Connect Date') ON(28,10,CH)     -
          HEADER('Last Connect') ON(57,10,CH)     -
          HEADER('Revoke Date') ON(119,10,CH)     -
          BTITLE('User :')                        -
          BREAK(10,8,CH)
)ENDSEL
)SEL &REC = 205A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    205A (@CCON)
* Purpose: Find all of the users who have more than a specified
*          number of group connections
* Note:    The ICETOOL "HIGHER(x)" keyword is used to set the
*          failure threshold
*--------------------------------------------------------------------*
  COPY    FROM(DBUDATA)  TO(TEMP205A) USING(A205)
  OCCURS  FROM(TEMP205A) LIST(RPT205A)                              -
          PAGE                                                      -
          TITLE('CCON: Users With More Than 100 Group Connections') -
          DATE(YMD/)                                                -
          TIME(12:)                                                 -
          BLANK                                                     -
          ON(10,8,CH)  HEADER('User ID')                            -
          ON(VALCNT)   HEADER('Number of Group Connections')        -
          HIGHER(100)
)ENDSEL
)SEL &REC = 205B | &REC = ALL
*--------------------------------------------------------------------*
* Name:    205B (@GRPM)
* Purpose: List the the members of a group.  Default group name
*          is 'SYS1'
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP205B) USING(B205)
  DISPLAY FROM(TEMP205B) LIST(RPT205B)               -
          PAGE                                       -
          TITLE('GRPM: Members of the SYS1 Group')   -
          DATE(YMD/)                                 -
          TIME(12:)                                  -
          BLANK                                      -
          ON(10,8,CH)     HEADER('User ID')          -
          ON(39,8,CH)     HEADER('Connection Owner') -
          ON(88,4,CH)     HEADER('Special')          -
          ON(93,4,CH)     HEADER('Oper')             -
          ON(113,4,CH)    HEADER('Auditor')          -
          ON(98,4,CH)     HEADER('Revoked')          -
          ON(118,10,CH)   HEADER('Revoke Date')      -
          ON(129,10,CH)   HEADER('Resume Date')
)ENDSEL
)SEL &REC = 205C | &REC = ALL
*--------------------------------------------------------------------*
* Name:    205C (@UGRP)
* Purpose: Find all of the user IDs which have extraordinary
*          RACF privileges, such as SPECIAL, OPERATIONS, and
*          AUDITOR at the group level
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP205C) USING(C205)
  DISPLAY FROM(TEMP205C) LIST(RPT205C)                              -
          PAGE                                                      -
          TITLE('UGRP: Users With Extraordinary Group Authorities') -
          DATE(YMD/)                                                -
          TIME(12:)                                                 -
          BLANK                                                     -
          ON(10,8,CH)  HEADER('User ID')                            -
          ON(19,8,CH)  HEADER('Group Name')                         -
          ON(88,4,CH)  HEADER('Group Special')                      -
          ON(93,4,CH)  HEADER('Group Operations')                   -
          ON(113,4,CH) HEADER('Group Auditor')                      -
          ON(54,3,CH)  HEADER('Revoked')
)ENDSEL
)SEL &REC = 206A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    206A (@ASOC)
* Purpose: Find all users who have RRSF associations defined
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP206A) USING(A206)
  DISPLAY FROM(TEMP206A) LIST(RPT206A)                                -
          PAGE                                                        -
          TITLE('ASOC: Users Who Have Explicit Associations Defined') -
          DATE(YMD/)                                                  -
          TIME(12:)                                                   -
          BLANK                                                       -
          ON(10,8,CH)    HEADER('User ID')                            -
          ON(19,8,CH)    HEADER('Tgt Node')                           -
          ON(28,8,CH)    HEADER('Tgt User')                           -
          ON(41,4,CH)    HEADER('Peer')                               -
          ON(56,4,CH)    HEADER('Remote Pend')                        -
          ON(61,4,CH)    HEADER('Local Pend')                         -
          ON(66,4,CH)    HEADER('PWSYNC')                             -
          ON(103,10,CH)  HEADER('Accepted Date')                      -
          ON(114,8,CH)   HEADER('Accepted Time')                      -
          ON(130,8,CH)   HEADER('Creator')
)ENDSEL
)SEL &REC = 207A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    207A (@CLBL)
* Purpose: Find certificate labels which will be the same after
*          folding to upper case and conversion of blanks and
*          special characters to "_"
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP207A) USING(A207)
  DISPLAY FROM(TEMP207A) LIST(RPT207A)            -
          PAGE                                    -
          TITLE('CLBL: Certificate Labels')       -
          DATE(4MD/)                              -
          TIME(12:)                               -
          BLANK                                   -
          ON(010,08,CH)  HEADER('User ID')        -
          ON(266,32,CH)  HEADER('Original Label') -
          ON(298,32,CH)  HEADER('Folded Label')
   OCCURS FROM(TEMP207A) LIST(RPT207A)                               -
          PAGE                                                       -
          TITLE('CLBL: Certificate Labels Which May Need to Change') -
          DATE(YMD/)                                                 -
          TIME(12:)                                                  -
          BLANK                                                      -
          ON(010,08,CH) HEADER('User ID')                            -
          ON(298,32,CH) HEADER('Folded Label')                       -
          ON(VALCNT)    HEADER('Count')                              -
          HIGHER(1)
)ENDSEL
)SEL &REC = 220  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    220 (USTSO)
* Purpose: Userids TSO data
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP220) USING(L220)
  DISPLAY FROM(TEMP220) LIST(RPT220)          -
          BLANK                               -
          TITLE('T220/USTSO - User TSO Data') -
          DATE TIME PAGE                      -
          HEADER('User') ON(10,8,CH)          -
          HEADER('Proc') ON(154,8,CH)         -
          HEADER('Size') ON(163,10,CH)        -
          HEADER('MaxSize') ON(176,10,CH)     -
          HEADER('Unit') ON(209,10,CH)        -
          HEADER('Account') ON(19,40,CH)
)ENDSEL
)SEL &REC = 270  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    270 (USOMVS)
* Purpose: Userids OMVS (UNIX System Services) data
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP270) USING(L270)
  DISPLAY FROM(TEMP270) LIST(RPT270)            -
          BLANK                                 -
          TITLE('T270/USOMVS - User OMVS Data') -
          DATE TIME PAGE                        -
          HEADER('User') ON(10,8,CH)            -
          HEADER('UID') ON(19,10,CH)            -
          HEADER('Home Path') ON(30,44,CH)      -
          HEADER('Program') ON(1054,44,CH)
)ENDSEL
)SEL &REC = 270A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    270 (@OMVS)
* Purpose: Find all user IDs which have an OMVS segment specified
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP270A) USING(A270)
  DISPLAY FROM(TEMP270A) LIST(RPT270A)                 -
          PAGE                                         -
          TITLE('OMVS: User IDs With an OMVS Segment') -
          DATE(YMD/)                                   -
          TIME(12:)                                    -
          BLANK                                        -
          ON(10,8,CH)    HEADER('User ID')             -
          ON(19,10,CH)   HEADER('OMVS UID')            -
          ON(30,44,CH)   HEADER('OMVS Home Path')      -
          ON(1054,44,CH) HEADER('Default Program')
)ENDSEL
)SEL &REC = 270B | &REC = ALL
*--------------------------------------------------------------------*
* Name:    270B (@SUPU)
* Purpose: Find all of the UNIX System Services users who have
*          a UID of zero (superuser)
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP270B) USING(B270)
  DISPLAY FROM(TEMP270B) LIST(RPT270B)                               -
          PAGE                                                       -
          TITLE('SUPU: UNIX System Services Super Users (UID of 0)') -
          DATE(YMD/)                                                 -
          TIME(12:)                                                  -
          BLANK                                                      -
          ON(10,8,CH)    HEADER('User ID')                           -
          ON(30,36,CH)   HEADER('Path Name')                         -
          ON(1054,36,CH) HEADER('Home Name')
)ENDSEL
)SEL &REC = 270C | &REC = ALL
*--------------------------------------------------------------------*
* Name:    270C (@UIDS)
* Purpose: Find all shared UNIX UIDs (those assigned to more than
*          one user
*--------------------------------------------------------------------*
  COPY    FROM(DBUDATA)  TO(TEMP270C) USING(C270)
  OCCURS  FROM(TEMP270C) LIST(RPT270C)                 -
          PAGE                                         -
          TITLE('UIDS: UNIX UIDs Used More Than Once') -
          DATE(YMD/)                                   -
          TIME(12:)                                    -
          BLANK                                        -
          ON(19,10,CH) HEADER('UNIX UID')              -
          ON(VALCNT)   HEADER('Number of Times Used')  -
          HIGHER(1)
)ENDSEL
)SEL &REC = 400  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    400 (DSBD)
* Purpose: Dataset basic data
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP400) USING(L400)
  DISPLAY FROM(TEMP400) LIST(RPT400)               -
          BLANK                                    -
          TITLE('T400/DSBD - Data Set Basic Data') -
          DATE TIME PAGE                           -
          HEADER('Data Set Profile') ON(10,44,CH)  -
          HEADER('Gen') ON(62,4,CH)                -
          HEADER('UACC') ON(133,8,CH)              -
          HEADER('Create Date ') ON(67,10,CH)      -
          HEADER('Owner') ON(156,8,CH)             -
          HEADER('Last Referenced') ON(87,10,CH)   -
          HEADER('Last Changed') ON(98,10,CH)      -
          HEADER('Audit Level') ON(147,8,CH)       -
          HEADER('Warning') ON(488,4,CH)
)ENDSEL
)SEL &REC = 400C | &REC = ALL
*--------------------------------------------------------------------*
* Name:   400C (@UADS)
* Purpoe: Find all data set profiles with a UACC other than NONE
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP400C) USING(C400)
  DISPLAY FROM(TEMP400C) LIST(RPT400C)                           -
          PAGE                                                   -
          TITLE('UADS: DS Profiles with a UACC Other Than None') -
          DATE(YMD/)                                             -
          TIME(12:)                                              -
          BLANK                                                  -
          ON(10,44,CH) HEADER('Data Set Name Profile Name')      -
          ON(55,6,CH)   HEADER('Volume')                         -
          ON(62,4,CH)   HEADER('Generic')                        -
          ON(78,8,CH)   HEADER('Owner')                          -
          ON(133,8,CH)  HEADER('UACC')
)ENDSEL
)SEL &REC = 400D | &REC = ALL
*--------------------------------------------------------------------*
* Name:    400D (@WNDS)
* Purpose: Find all data set profiles which are in WARNING mode
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP400D) USING(D400)
  DISPLAY FROM(TEMP400D) LIST(RPT400D)                    -
          PAGE                                            -
          TITLE('WNDS: DS Profiles with in WARNING Mode') -
          DATE(YMD/)                                      -
          TIME(12:)                                       -
          BLANK                                           -
          ON(10,44,CH) HEADER('Data Set Name')            -
          ON(55,6,CH)   HEADER('Volume')                  -
          ON(78,8,CH)   HEADER('Owner')                   -
          ON(133,8,CH)  HEADER('UACC')
)ENDSEL
)SEL &REC = 400E | &REC = ALL
*--------------------------------------------------------------------*
* Name:    400E (ICE66)
* Purpose: Report all dataset profiles and their UACC
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP400E) USING(E400)
  DISPLAY FROM(TEMP400E) LIST(RPT400E)          -
          PAGE                                  -
          TITLE('LIST OF DATASET PROFILES')     -
          DATE(4MD/)                            -
          TIME(24:)                             -
          BLANK                                 -
          ON(10,44,CH)  HEADER('DATA SET NAME') -
          ON(78,8,CH)   HEADER('OWNER')         -
          ON(488,3,CH)  HEADER('WARNING')       -
          ON(133,8,CH)  HEADER('UACC')          -
          ON(196,30,CH) HEADER('DESCRIPTION')
)ENDSEL
)SEL &REC = 400F | &REC = ALL
*--------------------------------------------------------------------*
* Name:    400F (ICE59)
* Purpose: Report all dataset profiles that have "UACC=NONE"
* Note:    To make this report on all dataset profiles with a UACC
*          greater than none, change:
*            133,4,CH,EQ,C'NONE')
*          to:
*            133,4,CH,NE,C'NONE')        (Change 'TITLE' also...)
*--------------------------------------------------------------------*
  COPY    FROM(DBUDATA)  TO(TEMP400F) USING(F400)
  DISPLAY FROM(TEMP400F) LIST(RPT400F)             -
          PAGE                                     -
          TITLE('DATASET PROFILES WITH UACC=NONE') -
          DATE(YMD/)                               -
          TIME(12:)                                -
          BLANK                                    -
          ON(10,44,CH)  HEADER('PROFILE NAME')     -
          ON(78,8,CH)   HEADER('OWNER')            -
          ON(62,4,CH)   HEADER('GENERIC?')         -
          ON(67,10,CH)  HEADER('CREATED')          -
          ON(133,7,CH)  HEADER('UACC')             -
          ON(196,64,CH) HEADER('INST. DATA')
)ENDSEL
)SEL &REC = 402A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    402A (@IDSC)
* Purpose: Find all of the data set profiles conditional access
*          lists which have a "*" in the access list with a level
*          of other than NONE
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP402A) USING(A402)
  DISPLAY FROM(TEMP402A) LIST(RPT402A)                           -
          PAGE                                                   -
          TITLE('IDSC: DS Cond ACLs With ID(*) Other Than None') -
          DATE(YMD/)                                             -
          TIME(12:)                                              -
          BLANK                                                  -
          ON(10,44,CH)  HEADER('Profile Name')                   -
          ON(55,6,CH)   HEADER('Volume')                         -
          ON(89,8,CH)   HEADER('Access')                         -
          ON(62,8,CH)   HEADER('Access Type')                    -
          ON(71,8,CH)   HEADER('Access Element')
)ENDSEL
)SEL &REC = 404  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    404 (DSACC)
* Purpose: Dataset access
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP404) USING(L404)
  DISPLAY FROM(TEMP404) LIST(RPT404)            -
          BLANK                                 -
          TITLE('T404/DSACC - Data Set Access') -
          DATE TIME PAGE                        -
          HEADER('Group') ON(62,8,CH)           -
          HEADER('Access') ON(71,8,CH)          -
          HEADER('Access Count') ON(80,4,CH)    -
          BTITLE('DataSet Profile:')            -
          BREAK(10,44,CH)
)ENDSEL
)SEL &REC = 404A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    404A (@ALDS)
* Purpose: Find all of the discrete data set profiles which have
*          IDs on the standard access list with ALTER.  These IDs
*          have the ability to change the access list on the profile
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP404A) USING(A404)
  DISPLAY FROM(TEMP404A) LIST(RPT404A)                            -
          PAGE                                                    -
          TITLE('ALDS: IDs with ALTER Auth to Discrete DS Profs') -
          DATE(YMD/)                                              -
          TIME(12:)                                               -
          BLANK                                                   -
          ON(10,44,CH)  HEADER('Profile Name')                    -
          ON(55,6,CH)   HEADER('Volume')                          -
          ON(62,8,CH)   HEADER('ID')                              -
          ON(80,5,CH)   HEADER('Access Count')
)ENDSEL
)SEL &REC = 404B | &REC = ALL
*--------------------------------------------------------------------*
* Name:    404B (@IDSS)
* Purpose: Find all of the data set profiles access lists which have
*          an "*" on the access list with a level of other than NONE
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP404B) USING(B404)
  DISPLAY FROM(TEMP404B) LIST(RPT404B)                               -
          PAGE                                                       -
          TITLE('IDSS: DS Standard ACLs With ID(*) Other Than None') -
          DATE(YMD/)                                                 -
          TIME(12:)                                                  -
          BLANK                                                      -
          ON(10,44,CH)  HEADER('Profile Name')                       -
          ON(55,6,CH)   HEADER('Volume')                             -
          ON(71,8,CH)   HEADER('Access')
)ENDSEL
)SEL &REC = 404U | &REC = ALL
*--------------------------------------------------------------------*
* Name:    404U (DSACCG)
* Purpose: Dataset access by group
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP404U) USING(U404)
  DISPLAY FROM(TEMP404U) LIST(RPT404U)                     -
          BLANK                                            -
          TITLE('T404U/DSACCG - Data Set Access by Group') -
          DATE TIME PAGE                                   -
          HEADER('Data Set Profile') ON(10,44,CH)          -
          HEADER('Access') ON(71,8,CH)                     -
          HEADER('Access Count') ON(80,4,CH)               -
          BTITLE('Group:')                                 -
          BREAK(62,8,CH)
)ENDSEL
)SEL &REC = 500  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    500 (GRBD)
* Purpose: General resource basic data
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP500) USING(L500)
  DISPLAY FROM(TEMP500) LIST(RPT500)                       -
          BLANK                                            -
          TITLE('T500/GRBD - General Resource Basic Data') -
          DATE TIME PAGE                                   -
          HEADER('Profile Name') ON(10,40,CH)              -
          HEADER('Gen') ON(266,4,CH)                       -
          HEADER('UACC') ON(341,8,CH)                      -
          HEADER('Create Date ') ON(275,10,CH)             -
          HEADER('Owner') ON(286,8,CH)                     -
          HEADER('Last Referenced') ON(295,10,CH)          -
          HEADER('Last Changed') ON(306,10,CH)             -
          HEADER('Audit Level') ON(350,8,CH)               -
          HEADER('Warning') ON(664,4,CH)                   -
          BTITLE('Class :')                                -
          BREAK(257,8,CH)
)ENDSEL
)SEL &REC = 500A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    500A (@BGGR)
* Purpose: Find the discrete generic resource profiles which have
*          generic characters in their name
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP500A) USING(A500)
  DISPLAY FROM(TEMP500A) LIST(RPT500A)                           -
          PAGE                                                   -
          TITLE('BGGR: Discrete GR Profiles with Generic Names') -
          DATE(YMD/)                                             -
          TIME(12:)                                              -
          BLANK                                                  -
          ON(10,60,CH)   HEADER('Profile')                       -
          ON(266,4,CH)   HEADER('Generic')                       -
          ON(257,8,CH)   HEADER('Class')                         -
          ON(275,10,CH)  HEADER('Created')                       -
          ON(286,8,CH)   HEADER('Owner')
)ENDSEL
)SEL &REC = 500B | &REC = ALL
*--------------------------------------------------------------------*
* Name:    500B (@CGEN)
* Purpose: Report the number of RACF general resource profiles in
*          the RACF database
*--------------------------------------------------------------------*
  COPY    FROM(DBUDATA)  TO(TEMP500B) USING(B500)
  OCCURS  FROM(TEMP500B) LIST(RPT500B)                       -
          PAGE                                               -
          TITLE('CGEN: Number of General Resource Profiles') -
          DATE(YMD/)                                         -
          TIME(12:)                                          -
          BLANK                                              -
          ON(257,8,CH)  HEADER('Class')                      -
          ON(VALCNT)    HEADER('Count')
)ENDSEL
)SEL &REC = 500C | &REC = ALL
*--------------------------------------------------------------------*
* Name:    500C (@PCAM)
* Purpose: Find all of the PROGRAM class profiles with specific
*          program names which have MAIN or BASIC APPLDATA
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP500C) USING(C500)
  DISPLAY FROM(TEMP500C) LIST(RPT500C)                           -
          PAGE                                                   -
          TITLE('PROGRAM Profiles with MAIN or BASIC Attribute') -
          DATE(YMD/)                                             -
          TIME(12:)                                              -
          BLANK                                                  -
          ON(10,8,CH)   HEADER('Name')                           -
          ON(286,8,CH)  HEADER('Owner')                          -
          ON(275,10,CH) HEADER('Created')                        -
          ON(341,8,CH)  HEADER('UACC')                           -
          ON(758,5,CH)  HEADER('APPLDATA')
)ENDSEL
)SEL &REC = 500D | &REC = ALL
*--------------------------------------------------------------------*
* Name:    500D (@UAGR)
* Purpose: Find all of the general resource profiles which have a
*          UACC of other than NONE
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP500D) USING(D500)
  DISPLAY FROM(TEMP500D) LIST(RPT500D)                           -
          PAGE                                                   -
          TITLE('UAGR: GR Profiles with a UACC Other Than None') -
          DATE(YMD/)                                             -
          TIME(12:)                                              -
          BLANK                                                  -
          ON(257,8,CH)  HEADER('Class')                          -
          ON(10,44,CH)  HEADER('General Resource Profile Name')  -
          ON(266,4,CH)  HEADER('Generic')                        -
          ON(286,8,CH)  HEADER('Owner')                          -
          ON(341,8,CH)  HEADER('UACC')
)ENDSEL
)SEL &REC = 500E | &REC = ALL
*--------------------------------------------------------------------*
* Name:    500E (@WNGR)
* Purpose: Find all general resource profiles which are in
*          WARNING mode
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP500E) USING(E500)
  DISPLAY FROM(TEMP500E) LIST(RPT500E)                          -
          PAGE                                                  -
          TITLE('WNGR: GR Profiles with in WARNING Mode')       -
          DATE(YMD/)                                            -
          TIME(12:)                                             -
          BLANK                                                 -
          ON(10,44,CH)  HEADER('General Resource Profile Name') -
          ON(257,8,CH)  HEADER('Class')                         -
          ON(286,8,CH)  HEADER('Owner')                         -
          ON(341,8,CH)  HEADER('UACC')
)ENDSEL
)SEL &REC = 503  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    503 (ICE53)
* Purpose: Report all general resource classes that have duplicate
*          transactions in the member lists
*--------------------------------------------------------------------*
  SORT   FROM(DBUDATA) TO(TEMP503) USING(L503)
  OCCUR  FROM(TEMP503) LIST(RPT503)                             -
         TITLE('TRANSACTIONS DEFINED IN GREATER THAN 1 GTRANS') -
         PAGE                                                   -
         DATE(YMD/)                                             -
         TIME(12:)                                              -
         BLANK                                                  -
         ON(257,8,CH)  HEADER('CLASS')                          -
         ON(266,8,CH)  HEADER('NAME')                           -
         ON(VALCNT)    HEADER('OCCURRENCES')                    -
         HIGHER(1)
)ENDSEL
)SEL &REC = 505  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    505 (GRACC)
* Purpose: General resource access
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP505) USING(L505)
  DISPLAY FROM(TEMP505) LIST(RPT505)                    -
          BLANK                                         -
          TITLE('T505/GRACC - General Resource Access') -
          DATE TIME PAGE                                -
          HEADER('Profile Name') ON(10,40,CH)           -
          HEADER('Group') ON(266,8,CH)                  -
          HEADER('Access') ON(275,8,CH)                 -
          HEADER('Access Count') ON(284,4,CH)           -
          BTITLE('Class :')                             -
          BREAK(257,8,CH)
)ENDSEL
)SEL &REC = 505A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    505A (@IGRS)
* Purpose: Find all of the general resource profile standard access
*          list entries which have a "*" on the access list with
*          a level of other than NONE
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP505A) USING(A505)
  DISPLAY FROM(TEMP505A) LIST(RPT505A)                               -
          PAGE                                                       -
          TITLE('IGRS: GR Standard ACLs with ID(*) Other Than None') -
          DATE(YMD/)                                                 -
          TIME(12:)                                                  -
          BLANK                                                      -
          ON(257,8,CH)  HEADER('Class')                              -
          ON(10,80,CH)  HEADER('Profile Name')                       -
          ON(275,8,CH)  HEADER('Access')
)ENDSEL
)SEL &REC = 505U | &REC = ALL
*--------------------------------------------------------------------*
* Name:    505U (GRACCG)
* Purpose: General resource access by group
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP505U) USING(U505)
  DISPLAY FROM(TEMP505U) LIST(RPT505U)                             -
          BLANK                                                    -
          TITLE('T505U/GRACCG - General Resource Access by Group') -
          DATE TIME PAGE                                           -
          HEADER('Class') ON(257,8,CH)                             -
          HEADER('Profile Name') ON(10,40,CH)                      -
          HEADER('Access') ON(275,8,CH)                            -
          HEADER('Access Count') ON(284,4,CH)                      -
          BTITLE('Group :')                                        -
          BREAK(266,8,CH)
)ENDSEL
)SEL &REC = 507A | &REC = ALL
*--------------------------------------------------------------------*
* Name:    507A (@IGRC)
* Purpose: Find all of the general resource profile conditional
*          access list entries which have a "*" on the access list
*          with a level of other than NONE
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA)  TO(TEMP507A) USING(A507)
  DISPLAY FROM(TEMP507A) LIST(RPT507A)                           -
          PAGE                                                   -
          TITLE('IGRC: GR Cond ACLs with ID(*) Other Than None') -
          DATE(YMD/)                                             -
          TIME(12:)                                              -
          BLANK                                                  -
          ON(257,8,CH)  HEADER('Class')                          -
          ON(10,60,CH)  HEADER('Profile Name')                   -
          ON(293,8,CH)  HEADER('Access')                         -
          ON(266,8,CH)  HEADER('Access Type')                    -
          ON(275,8,CH)  HEADER('Access Element')
)ENDSEL
)SEL &REC = 540  | &REC = ALL
*--------------------------------------------------------------------*
* Name:    540 (GRST)
* Purpose: Started task segment
*--------------------------------------------------------------------*
  SORT    FROM(DBUDATA) TO(TEMP540) USING(L540)
  DISPLAY FROM(TEMP540) LIST(RPT540)                  -
          BLANK                                       -
          TITLE('T540/STDATA - Started Task Segment') -
          DATE TIME PAGE                              -
          HEADER('Profile Name') ON(10,44,CH)         -
          HEADER('User') ON(266,8,CH)                 -
          HEADER('Group') ON(275,8,CH)                -
          HEADER('Trust') ON(284,4,CH)                -
          HEADER('Priv') ON(289,4,CH)                 -
          HEADER('Trace') ON(294,4,CH)
)ENDSEL
)SEL &REC = 100  | &REC = ALL
//TEMP100  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 100A | &REC = ALL
//TEMP100A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 100B | &REC = ALL
//TEMP100B DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 102           | &REC = ALL
//TEMP102  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 102A | &REC = ALL
//TEMP102A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 120A | &REC = ALL
//TEMP120A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200           | &REC = ALL
//TEMP200  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200A | &REC = ALL
//TEMP200A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200B | &REC = ALL
//TEMP200B DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200C | &REC = ALL
//TEMP200C DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200D | &REC = ALL
//TEMP200D DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200E | &REC = ALL
//TEMP200E DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200F | &REC = ALL
//TEMP200F DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200G | &REC = ALL
//TEMP200G DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200H | &REC = ALL
//TEMP200H DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200I | &REC = ALL
//TEMP200I DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 200J | &REC = ALL
//TEMP200J DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 205           | &REC = ALL
//TEMP205  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 205A | &REC = ALL
//TEMP205A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 205B | &REC = ALL
//TEMP205B DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 205C | &REC = ALL
//TEMP205C DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 206A | &REC = ALL
//TEMP206A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 207A | &REC = ALL
//TEMP207A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 220           | &REC = ALL
//TEMP220  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 270           | &REC = ALL
//TEMP270  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 270A | &REC = ALL
//TEMP270A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 270B | &REC = ALL
//TEMP270B DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 270C | &REC = ALL
//TEMP270C DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 400           | &REC = ALL
//TEMP400  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 400C | &REC = ALL
//TEMP400C DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 400D | &REC = ALL
//TEMP400D DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 400E | &REC = ALL
//TEMP400E DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 400F | &REC = ALL
//TEMP400F DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 402A | &REC = ALL
//TEMP402A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 404           | &REC = ALL
//TEMP404  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 404A | &REC = ALL
//TEMP404A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 404B | &REC = ALL
//TEMP404B DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 404U | &REC = ALL
//TEMP404U DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 500           | &REC = ALL
//TEMP500  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 500A | &REC = ALL
//TEMP500A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 500B | &REC = ALL
//TEMP500B DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 500C | &REC = ALL
//TEMP500C DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 500D | &REC = ALL
//TEMP500D DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 500E | &REC = ALL
//TEMP500E DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 503  | &REC = ALL
//TEMP503  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 505  | &REC = ALL
//TEMP505  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 505A | &REC = ALL
//TEMP505A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 505U | &REC = ALL
//TEMP505U DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 507A | &REC = ALL
//TEMP507A DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 540  | &REC = ALL
//TEMP540  DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
)ENDSEL
)SEL &REC = 100  | &REC = ALL
//RPT100   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 100A | &REC = ALL
//RPT100A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 100B | &REC = ALL
//RPT100B  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 102  | &REC = ALL
//RPT102   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 102A | &REC = ALL
//RPT102A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 120A | &REC = ALL
//RPT120A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200  | &REC = ALL
//RPT200   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200A | &REC = ALL
//RPT200A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200B | &REC = ALL
//RPT200B  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200C | &REC = ALL
//RPT200C  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200D | &REC = ALL
//RPT200D  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200E | &REC = ALL
//RPT200E  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200F | &REC = ALL
//RPT200F  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200G | &REC = ALL
//RPT200G  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200H | &REC = ALL
//RPT200H  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200I | &REC = ALL
//RPT200I  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 200J | &REC = ALL
//RPT200J  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 205  | &REC = ALL
//RPT205   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 205A | &REC = ALL
//RPT205A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 205B | &REC = ALL
//RPT205B  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 205C | &REC = ALL
//RPT205C  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 206A | &REC = ALL
//RPT206A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 207A | &REC = ALL
//RPT207A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 220  | &REC = ALL
//RPT220   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 270  | &REC = ALL
//RPT270   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 270A | &REC = ALL
//RPT270A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 270B | &REC = ALL
//RPT270B  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 270C | &REC = ALL
//RPT270C  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 400  | &REC = ALL
//RPT400   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 400C | &REC = ALL
//RPT400C  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 400D | &REC = ALL
//RPT400D  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 400E | &REC = ALL
//RPT400E  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 400F | &REC = ALL
//RPT400F  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 402A | &REC = ALL
//RPT402A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 404  | &REC = ALL
//RPT404   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 404A | &REC = ALL
//RPT404A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 404B | &REC = ALL
//RPT404B  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 404U | &REC = ALL
//RPT404U  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 500  | &REC = ALL
//RPT500   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 500A | &REC = ALL
//RPT500A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 500B | &REC = ALL
//RPT500B  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 500C | &REC = ALL
//RPT500C  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 500D | &REC = ALL
//RPT500D  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 500E | &REC = ALL
//RPT500E  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 503  | &REC = ALL
//RPT503   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 505  | &REC = ALL
//RPT505   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 505A | &REC = ALL
//RPT505A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 505U | &REC = ALL
//RPT505U  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 507A | &REC = ALL
//RPT507A  DD  SYSOUT=*
)ENDSEL
)SEL &REC = 540  | &REC = ALL
//RPT540   DD  SYSOUT=*
)ENDSEL
)SEL &REC = 100  | &REC = ALL
//L100CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0100')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 100A | &REC = ALL
//A100CNTL DD  *
  INCLUDE COND=(5,4,SS,EQ,C'0100,0200,0400,0500')
  OUTFIL  FNAMES=TEMP100A,OUTREC=(1,4,5,4,CHANGE=(26,
          C'0100',C'Group Profiles',
          C'0200',C'User Profiles',
          C'0400',C'Dataset Profiles',
          C'0500',C'General Resource Profiles'),
          NOMATCH=(C'Unknown Profiles'))
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 100B | &REC = ALL
//B100CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0100',AND,363,4,CH,EQ,C'YES ')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 102  | &REC = ALL
//L102CNTL DD  *
  SORT    FIELDS=(10,8,CH,A,19,8,CH,A,28,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0102')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 102A | &REC = ALL
//A102CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(28,8,CH,NE,C'USE ',AND,5,4,CH,EQ,C'0102')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 120A | &REC = ALL
//A120CNTL DD  *
  SORT    FIELDS=(19,10,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0120')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200  | &REC = ALL
//L200CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0200')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200A | &REC = ALL
//A200CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,
                64,4,CH,EQ,C'000',AND,
                10,3,CH,NE,C'irr')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200B | &REC = ALL
//B200CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,
               (44,3,CH,EQ,C'YES',OR,
                49,3,CH,EQ,C'YES',OR,
                54,3,CH,EQ,C'YES',OR,
                390,3,CH,EQ,C'YES',OR,
                638,3,CH,EQ,C'YES'))
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200C | &REC = ALL
//C200CNTL DD  *
  SORT    FIELDS=COPY
  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,
                 19,10,CH,GE,DATE1(-)-90)
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200D | &REC = ALL
//D200CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,
                 54,3,CH,EQ,C'YES')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200E | &REC = ALL
//E200CNTL DD  *
  SORT    FIELDS=(118,10,CH,A,19,10,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,
                68,8,CH,EQ,C'        ')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200F | &REC = ALL
//F200CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,
                64,3,CH,EQ,C'000')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200G | &REC = ALL
//G200CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,
                118,8,CH,EQ,C'        ',AND,
                68,8,CH,EQ,C'        ',AND,
                10,3,CH,NE,C'irr')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200H | &REC = ALL
//H200CNTL DD  *
  SORT FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,
          (462,10,CH,NE,C'          ',OR,
          54,3,CH,EQ,C'YES'))
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200I | &REC = ALL
//I200CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,
                385,3,CH,EQ,C'YES')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 200J | &REC = ALL
//J200CNTL DD  *
  SORT    FIELDS=(64,3,CH,D,10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0200',AND,
                64,3,CH,NE,C'060')
  OPTION VLSHRT
)ENDSEL
)SEL &REC = 205  | &REC = ALL
//L205CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0205')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 205A | &REC = ALL
//A205CNTL DD  *
  INCLUDE COND=(5,4,CH,EQ,C'0205')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 205B | &REC = ALL
//B205CNTL DD  *
  SORT    FIELDS=(28,10,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0205',AND,19,8,CH,EQ,C'SYS1 ')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 205C | &REC = ALL
//C205CNTL DD  *
  SORT    FIELDS=(10,08,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0205',AND,
               (88,3,CH,EQ,C'YES',OR,
                93,3,CH,EQ,C'YES',OR,
                113,3,CH,EQ,C'YES',OR,
                54,3,CH,EQ,C'YES'))
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 206A | &REC = ALL
//A206CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0206')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 207A | &REC = ALL
//A207CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0206')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 220  | &REC = ALL
//L220CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0220')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 270  | &REC = ALL
//L270CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0270')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 270A | &REC = ALL
//A270CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0270')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 270B | &REC = ALL
//B270CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0270',AND,
                 19,10,CH,EQ,C'0000000000')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 270C | &REC = ALL
//C270CNTL DD  *
  SORT    FIELDS=(19,10,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0270')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 400  | &REC = ALL
//L400CNTL DD  *
  SORT    FIELDS=(10,44,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0400')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 400C | &REC = ALL
//C400CNTL DD  *
  SORT    FIELDS=(10,44,CH,A,55,6,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0400',AND,
                 133,8,CH,NE,C'NONE')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 400D | &REC = ALL
//D400CNTL DD  *
  SORT    FIELDS=(10,44,CH,A,55,6,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0400',AND,
                 488,4,CH,EQ,C'YES')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 400E | &REC = ALL
//E400CNTL DD  *
  SORT    FIELDS=(10,44,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0400')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 400F | &REC = ALL
//F400CNTL DD  *
  SORT    FIELDS=(118,10,CH,A,19,10,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0400',AND,
                133,4,CH,EQ,C'NONE')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 402A | &REC = ALL
//A402CNTL DD  *
  SORT    FIELDS=(10,44,CH,A,55,6,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0402',AND,
                 80,8,CH,EQ,C'*',AND,
                 89,8,CH,NE,C'NONE')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 404  | &REC = ALL
//L404CNTL DD  *
  SORT    FIELDS=(10,44,CH,A,62,8,CH,A,71,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0404')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 404A | &REC = ALL
//A404CNTL DD  *
  SORT    FIELDS=(10,44,CH,A,55,6,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0404',AND,
                 71,8,CH,EQ,C'ALTER',AND,
                 55,6,CH,NE,C'     ')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 404B | &REC = ALL
//B404CNTL DD  *
  SORT    FIELDS=(10,44,CH,A,55,6,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0404',AND,62,8,CH,EQ,C'*',AND,
           71,8,CH,NE,C'NONE')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 404U | &REC = ALL
//U404CNTL DD  *
  SORT    FIELDS=(62,8,CH,A,10,44,CH,A,71,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0404')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 500  | &REC = ALL
//L500CNTL DD  *
  SORT    FIELDS=(257,8,CH,A,10,245,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0500')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 500A | &REC = ALL
//A500CNTL DD  *
  SORT    FIELDS=(10,246,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0500',AND,266,4,CH,EQ,C'NO ',AND,
                 257,8,CH,NE,C'PROGRAM',AND,
                 257,8,CH,NE,C'VMNODE',AND,
                   (10,249,SS,EQ,C'*',OR,
                    10,249,SS,EQ,C'%',OR,
                    10,249,SS,EQ,C'&&'))
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 500B | &REC = ALL
//B500CNTL DD  *
  INCLUDE COND=(5,4,CH,EQ,C'0500')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 500C | &REC = ALL
//C500CNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0500',AND,
                 257,8,CH,EQ,C'PROGRAM',AND,
                (758,255,CH,EQ,C'MAIN',OR,
                 758,255,CH,EQ,C'BASIC'),AND,
                 10,8,SS,NE,C'*')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 500D | &REC = ALL
//D500CNTL DD  *
  SORT    FIELDS=(257,8,CH,A,10,246,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0500',AND,
                 664,4,CH,EQ,C'YES')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 500E | &REC = ALL
//E500CNTL DD  *
  SORT    FIELDS=(257,8,CH,A,10,246,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0500',AND,
                 341,8,CH,NE,C'NONE',AND,
                 257,8,CH,NE,C'DIGTCERT')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 503  | &REC = ALL
//L503CNTL DD  *
  SORT    FIELDS=(257,8,CH,A,10,245,CH,A,266,255,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0503',AND,257,4,CH,EQ,C'GIMS')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 505  | &REC = ALL
//L505CNTL DD  *
  SORT    FIELDS=(257,8,CH,A,10,245,CH,A,266,8,CH,A,275,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0505')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 505A | &REC = ALL
//A505CNTL DD  *
  SORT    FIELDS=(257,8,CH,A,10,247,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0505',AND,
                 266,8,CH,EQ,C'*',AND,
                 275,8,CH,NE,C'NONE')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 505U | &REC = ALL
//U505CNTL DD  *
  SORT    FIELDS=(266,8,CH,A,257,8,CH,A,10,245,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0505')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 507A | &REC = ALL
//A507CNTL DD  *
  SORT    FIELDS=(257,8,CH,A,10,246,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0507',AND,
                 284,8,CH,EQ,C'*',AND,
                 293,8,CH,NE,C'NONE')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 540  | &REC = ALL
//L540CNTL DD  *
  SORT    FIELDS=(6,251,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0540')
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 400A | &REC = ALL
//*-------------------------------------------------------------------*
//*             Data Sets - Exessive Generic Profiles
//*-------------------------------------------------------------------*
//* Count the number of generic data set profiles per high-level
//* qualifier.
//*
//* This report identifies those high-level qualifiers which have more
//* than the specified number of generic data set profiles defined.
//*
//* ICETOOL's "HIGHER(x)" keyword is used to set the reporting
//* threshold.
//*-------------------------------------------------------------------*
//REC400A1 EXEC PGM=SORT
//SORTIN   DD  DISP=SHR,DSN=&TMPDRPTU
//SORTWK01 DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$1     DD  DISP=(NEW,PASS),DSN=&&TEMP1,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$2     DD  DISP=(NEW,PASS),DSN=&&TEMP2,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$3     DD  DISP=(NEW,PASS),DSN=&&TEMP3,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$4     DD  DISP=(NEW,PASS),DSN=&&TEMP4,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$5     DD  DISP=(NEW,PASS),DSN=&&TEMP5,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$6     DD  DISP=(NEW,PASS),DSN=&&TEMP6,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$7     DD  DISP=(NEW,PASS),DSN=&&TEMP7,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$8     DD  DISP=(NEW,PASS),DSN=&&TEMP8,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//SYSOUT   DD  SYSOUT=*
//SORTOUT  DD  DSN=&&TEMP,DISP=(NEW,DELETE,DELETE),
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//SYSIN    DD  *
  SORT    FIELDS=(10,44,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0400',AND,62,4,CH,EQ,C'YES ')
  OUTFIL  INCLUDE=(11,1,CH,EQ,C'.',OR,11,1,CH,EQ,C' '),
          OUTREC=(1,4,5,4,X,10,1,7X),FNAMES=DS$1
  OUTFIL  INCLUDE=(12,1,CH,EQ,C'.'),
          OUTREC=(1,4,5,4,X,10,2,6X),FNAMES=DS$2
  OUTFIL  INCLUDE=(13,1,CH,EQ,C'.',AND,10,3,SS,NE,C'.'),
          OUTREC=(1,4,5,4,X,10,3,5X),FNAMES=DS$3
  OUTFIL  INCLUDE=(14,1,CH,EQ,C'.',AND,10,4,SS,NE,C'.'),
          OUTREC=(1,4,5,4,X,10,4,4X),FNAMES=DS$4
  OUTFIL  INCLUDE=(15,1,CH,EQ,C'.',AND,10,5,SS,NE,C'.'),
          OUTREC=(1,4,5,4,X,10,5,3X),FNAMES=DS$5
  OUTFIL  INCLUDE=(16,1,CH,EQ,C'.',AND,10,6,SS,NE,C'.'),
          OUTREC=(1,4,5,4,X,10,6,2X),FNAMES=DS$6
  OUTFIL  INCLUDE=((17,1,CH,EQ,C'.',OR,17,1,CH,EQ,C' '),
          AND,10,7,SS,NE,C'.'),
          OUTREC=(1,4,5,4,X,10,7,1X),FNAMES=DS$7
  OUTFIL  SAVE,
          OUTREC=(1,4,5,4,X,10,8),FNAMES=DS$8
  OPTION  VLSHRT
//*-------------------------------------------------------------------*
//REC400A2 EXEC PGM=ICETOOL
//TOOLMSG  DD  SYSOUT=*
//RPT400A  DD  SYSOUT=*
//DFSMSG   DD  SYSOUT=*
//DBUDATA  DD  DISP=(OLD,DELETE),DSN=&&TEMP1
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP2
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP3
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP4
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP5
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP6
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP7
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP8
//TEMP0001 DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
//TOOLIN   DD  *
  OCCURS  FROM(DBUDATA) LIST(RPT400A)                   -
          PAGE                                          -
          TITLE('HLQs With Excessive Generic Profiles') -
          DATE(YMD/)                                    -
          TIME(12:)                                     -
          BLANK                                         -
          ON(10,8,CH)   HEADER('HLQ')                   -
          ON(VALCNT)    HEADER('Count')                 -
          HIGHER(200)
)ENDSEL
)SEL &REC = 400B | &REC = ALL
//*-------------------------------------------------------------------*
//* $CFQG: Count fully qualified generic data set profiles
//*
//* This report identifies those high-level qualifiers which
//* have more than the specified number of fully qualified
//* generic data set profiles defined.
//*
//* ICETOOL's "HIGHER(x)" keyword is used to set the reporting
//* threshold.
//*-------------------------------------------------------------------*
//REC400B1 EXEC PGM=SORT
//SORTIN   DD  DISP=SHR,DSN=&TMPDRPTU
//SORTWK01 DD  SPACE=&SETJRPTS,UNIT=&SETJRPTU
//DS$1     DD  DISP=(NEW,PASS),DSN=&&TEMP1,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$2     DD  DISP=(NEW,PASS),DSN=&&TEMP2,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$3     DD  DISP=(NEW,PASS),DSN=&&TEMP3,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$4     DD  DISP=(NEW,PASS),DSN=&&TEMP4,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$5     DD  DISP=(NEW,PASS),DSN=&&TEMP5,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$6     DD  DISP=(NEW,PASS),DSN=&&TEMP6,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$7     DD  DISP=(NEW,PASS),DSN=&&TEMP7,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//DS$8     DD  DISP=(NEW,PASS),DSN=&&TEMP8,
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//SYSOUT   DD  SYSOUT=*
//SORTOUT  DD  DSN=&&TEMP,DISP=(NEW,DELETE,DELETE),
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//SYSIN    DD  *
  SORT    FIELDS=(10,44,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0400',AND,62,4,CH,EQ,C'YES ',AND,
          10,44,SS,NE,C'*',AND,10,44,SS,NE,C'%')
  OUTFIL  INCLUDE=(11,1,CH,EQ,C'.',OR,11,1,CH,EQ,C' '),
          OUTREC=(1,4,5,4,X,10,1,7X),FNAMES=DS$1
  OUTFIL  INCLUDE=(12,1,CH,EQ,C'.'),
          OUTREC=(1,4,5,4,X,10,2,6X),FNAMES=DS$2
  OUTFIL  INCLUDE=(13,1,CH,EQ,C'.',AND,10,3,SS,NE,C'.'),
          OUTREC=(1,4,5,4,X,10,3,5X),FNAMES=DS$3
  OUTFIL  INCLUDE=(14,1,CH,EQ,C'.',AND,10,4,SS,NE,C'.'),
          OUTREC=(1,4,5,4,X,10,4,4X),FNAMES=DS$4
  OUTFIL  INCLUDE=(15,1,CH,EQ,C'.',AND,10,5,SS,NE,C'.'),
          OUTREC=(1,4,5,4,X,10,5,3X),FNAMES=DS$5
  OUTFIL  INCLUDE=(16,1,CH,EQ,C'.',AND,10,6,SS,NE,C'.'),
          OUTREC=(1,4,5,4,X,10,6,2X),FNAMES=DS$6
  OUTFIL  INCLUDE=((17,1,CH,EQ,C'.',OR,17,1,CH,EQ,C' '),
          AND,10,7,SS,NE,C'.'),
          OUTREC=(1,4,5,4,X,10,7,1X),FNAMES=DS$7
  OUTFIL  SAVE,
          OUTREC=(1,4,5,4,X,10,8),FNAMES=DS$8
  OPTION  VLSHRT
//*-------------------------------------------------------------------*
//REC400B2 EXEC PGM=ICETOOL
//TOOLMSG  DD  SYSOUT=*
//RPT400B  DD  SYSOUT=*
//DFSMSG   DD  SYSOUT=*
//DBUDATA  DD  DISP=(OLD,DELETE),DSN=&&TEMP1
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP2
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP3
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP4
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP5
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP6
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP7
//         DD  DISP=(OLD,DELETE),DSN=&&TEMP8
//TEMP0001 DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
//TOOLIN   DD  *
  OCCURS  FROM(DBUDATA) LIST(RPT400B)                               -
          PAGE                                                      -
          TITLE('HLQs With Excessive Fully Qual. Generic Profiles') -
          DATE(YMD/)                                                -
          TIME(12:)                                                 -
          BLANK                                                     -
          ON(10,8,CH)   HEADER('HLQ')                               -
          ON(VALCNT)    HEADER('Count')                             -
          HIGHER(100)
)ENDSEL
)SEL &REC = 560  | &REC = ALL
//*-------------------------------------------------------------------*
//*   Description: Find all of the digital certificates
//*                stored in the RACF data base that have
//*                already expired or which will expire in
//*                the next 30 days.
//*
//*   Status:      11Apr10 Version 1.0
//*
//*   Start End Description          Record
//*   ----- --- -------------------- ----
//*   001   004 Record type          0560
//*   266   275 Start Date           0560
//*   286   295 End Date             0560
//*
//*   Note: The "Start" and "End" values are the ones
//*   documented in "RACF Macros and Exits". DFSORT requires
//*   that you add four (4) to each of these values to
//*   account for the four byte record descriptor word that
//*   is at the front of each variable length record.
//*-------------------------------------------------------------------*
//REC560 EXEC PGM=ICETOOL,PARM='MSGPRT=ALL'
//DBUDATA  DD  DISP=SHR,DSN=&TMPDRPTU
//TEMP0001 DD  UNIT=&SETJRPTU,SPACE=&SETJRPTS
//TOOLMSG  DD  SYSOUT=*
//RPT560   DD  SYSOUT=*
//DFSMSG   DD  SYSOUT=*
//TOOLIN   DD  *
  SORT    FROM(DBUDATA) TO(TEMP0001) USING(CERT)
  DISPLAY FROM(TEMP0001) LIST(RPT560)                     -
          PAGE                                            -
          TITLE('Expired or Nearly Expired Certificates') -
          DATE(YMD/)                                      -
          TIME(12:)                                       -
          BLANK                                           -
          ON(010,60,CH)  HEADER('Name')                   -
          ON(266,10,CH)  HEADER('Start Date')             -
          ON(286,10,CH)  HEADER('End Date')
//CERTCNTL DD  *
  SORT    FIELDS=(10,8,CH,A)
  INCLUDE COND=(5,4,CH,EQ,C'0560',AND,
                286,10,CH,NE,C'          ',AND,
                286,10,CH,LT,DATE1(-)+30)
  OPTION  VLSHRT
)ENDSEL
)SEL &REC = 100C | &REC = ALL
//*-------------------------------------------------------------------*
//* Name:     UNIVGRP
//* Function: List all of the members of all UNIVERSAL groups
//* Status:   11Apr10 Version 1.0
//*
//* Input:    Unloaded RACF database, created by the
//*           RACF Database Unload Utility (IRRDBU00)
//*           allocated to DDNAME DBUDATA
//*
//* Function: This sample DFSORT ICETOOL job uses the
//*           ICETOOL SPLICE operator to join the
//*           GROUP_BASIC_DATA record (0100) with the
//*           USER_CONNECTION_RECORD (0205) to produce a report
//*           showing all of the members of all of each of
//*           the UNIVERSAL groups.
//*
//*           This report is created by:
//*           1) Extract all of the GROUP_BASIC_DATA records
//*              and reformatting them into a format similar
//*              to the USER_CONNECT_DATA record,
//*              setting the "record type" to '0000'.
//*           2) Extract all of the USER_CONNECT_DATA
//*              records and pad them with blanks to be the
//*              same size as the records created in step 1.
//*           3) Combine the records from step 1 and step 2
//*              and sort them based on the group name and
//*              the record type. For each group, this places
//*              the record which contains the "is this a
//*              UNIVERSAL" group flag record ahead of the
//*              records which define the members of the group.
//*           4) Merge the records, so that the "is this a
//*              UNIVERSAL" group flag is placed on each of
//*              the group member records.
//*           5) Select all of the records which have a "YES"
//*              for the "is this a UNIVERSAL group" flag.
//*           6) Create a report for the records from step 5.
//*
//*    Start End Description          From  Start End
//*    ----- --- -------------------- ----  ----- ---
//*    001   004 Record type          xxxx  Inserted by SORT stmt
//*     "     "    "                  0205    001 004
//*    006   013 User ID              0205    006 013
//*    015   022 Group ID             0205    015 022
//*    024   033 Connected date       0205    024 033
//*    035   042 Connection owner     0205    035 042
//*    044   051 Last connection time 0205    044 051
//*    053   062 Last connection date 0205    053 062
//*    064   071 Default UACC         0205    064 071
//*    073   077 RACINIT count        0205    073 077
//*    079   082 ADSP flag            0205    079 082
//*    084   087 Group-special flag   0205    084 087
//*    089   092 Group-operations     0205    089 092
//*    094   097 Revoked flag         0205    094 097
//*    099   102 GRPACC flag          0205    099 102
//*    104   107 NOTERMUACC flag      0205    104 107
//*    109   112 Group-auditor flag   0205    109 112
//*    114   123 Revoke date          0205    114 123
//*    125   134 Resume date          0205    125 134
//*    136   139 UNIVERSAL Group flag 0100    359 362
//*
//*    Note: The "Start" and "End" values are the ones
//*    documented in "RACF Macros and Exits". DFSORT requires
//*    that you add four (4) to each of these values to
//*    account for the four byte record descriptor word that
//*    is at the front of each variable length record.
//*-------------------------------------------------------------------*
//REC100C EXEC PGM=ICETOOL,PARM='MSGPRT=ALL'
//DBUDATA  DD  DISP=SHR,DSN=&TMPDRPTU
//GRPS     DD  DSN=&&GRPS,DISP=(NEW,PASS,DELETE),
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//UNIVGRPS DD  DSN=&&UNIVGRPS,DISP=(NEW,PASS,DELETE),
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//USRCON   DD  DSN=&&USRCON,DISP=(NEW,PASS,DELETE),
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//TEMP01   DD  DSN=&&TEMP01,DISP=(NEW,PASS,DELETE),
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//MERGED   DD  DSN=&&MERGED,DISP=(NEW,PASS,DELETE),
//             UNIT=&SETJRPTU,SPACE=&SETJRPTS
//ALLGRPS  DD  DISP=(OLD,PASS),DSN=*.GRPS,VOL=REF=*.GRPS
//         DD  DISP=(OLD,PASS),DSN=*.USRCON,VOL=REF=*.USRCON
//TOOLMSG  DD  SYSOUT=*
//DFSMSG   DD  DUMMY
//RPT100C  DD  SYSOUT=*
//TOOLIN   DD  *
*--------------------------------------------------------------------
* Step 1:  Extract the GROUP BASIC DATA (0100) records and
*          place the data into the same columns as the USER
*          GROUP CONNECTION record, with the "UNIVERSAL" flag
*          appended at the end.
*--------------------------------------------------------------------
  SORT    FROM(DBUDATA)  TO(GRPS)     USING(GPBD)
*--------------------------------------------------------------------
* Step 2:  Extract all of the USER_CONNECT_DATA
*          records and pad them with blanks to be the
*          same size as the records created in step 1.
*--------------------------------------------------------------------
  SORT    FROM(DBUDATA)  TO(USRCON)   USING(UCON)
*--------------------------------------------------------------------
* Step 3:  Combine the records from step 1 and step 2
*          and sort them based on the group name and
*          the record type. For each group, this places
*          the record which contains the "is this a
*          UNIVERSAL" group flag record ahead of the
*          records which define the members of the group.
*--------------------------------------------------------------------
  SORT    FROM(ALLGRPS)  TO(TEMP01)   USING(ALLG)
*--------------------------------------------------------------------
* Step 4:  Merge the records, so that the "is this a
*          UNIVERSAL" group flag is placed on each of
*          the group member records.
*--------------------------------------------------------------------
  SPLICE  FROM(TEMP01)   TO(MERGED)    -
          ON(19,8,CH)                  -  Group Name (common field)
          WITH(1,139)                  -  Rest of record
          WITHALL
*--------------------------------------------------------------------
* Step 5:  Select all of the records which have a "YES"
*          for the "is this a UNIVERSAL group" flag.
*--------------------------------------------------------------------
  SORT    FROM(MERGED)   TO(UNIVGRPS) USING(UNVG)
*--------------------------------------------------------------------
* Step 6:  Create a report for the records from step 5.
*--------------------------------------------------------------------
  DISPLAY FROM(UNIVGRPS) LIST(RPT100C)                  -
          PAGE                                          -
          TITLE('Users Connected to a UNIVERSAL Group') -
          DATE(YMD/)                                    -
          TIME(12:)                                     -
          BLANK                                         -
          ON(10,8,CH)    HEADER('User')                 -
          ON(28,10,CH)   HEADER('Created')              -
          ON(39,8,CH)    HEADER('Owner')                -
          ON(88,4,CH)    HEADER('Spec?')                -
          ON(93,4,CH)    HEADER('Oper?')                -
          ON(113,4,CH)   HEADER('Audit?')               -
          BREAK(19,8,CH)
//GPBDCNTL DD  *
  SORT    FIELDS=COPY
  INCLUDE COND=(5,4,CH,EQ,C'0100')
  OUTREC  FIELDS=(1,4,C'0000',10X,10,8,140:363,4)
//UCONCNTL DD  *
  SORT    FIELDS=COPY
  INCLUDE COND=(5,4,CH,EQ,C'0205')
  OUTREC  FIELDS=(1,4,5,134,C'    ')
  OPTION  VLSHRT
//ALLGCNTL DD  *
  SORT    FIELDS=(19,8,CH,A,5,4,CH,A)
//UNVGCNTL DD  *
  SORT    FIELDS=COPY
  INCLUDE COND=(140,4,CH,EQ,C'YES')
)ENDSEL
)SEL &REC = 901  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  System information
//*-------------------------------------------------------------------*
//SYSTEM   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION SYSTEM
)ENDSEL
)SEL &REC = 902  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  Group tree
//*-------------------------------------------------------------------*
//RACGRP   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION RACGRP
)ENDSEL
)SEL &REC = 903  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  Program properties table
//*-------------------------------------------------------------------*
//SYSPPT   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION SYSPPT
)ENDSEL
)SEL &REC = 904  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  Authorized caller table
//*-------------------------------------------------------------------*
//RACAUT   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION RACAUT
)ENDSEL
)SEL &REC = 905  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  Class descriptor table
//*-------------------------------------------------------------------*
//RACCDT   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION RACCDT
)ENDSEL
)SEL &REC = 906  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  Exits
//*-------------------------------------------------------------------*
//RACEXT   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION RACEXT
)ENDSEL
)SEL &REC = 907  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  Global access table
//*-------------------------------------------------------------------*
//RACGAC   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION RACGAC
)ENDSEL
)SEL &REC = 908  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  Started procedure table
//*-------------------------------------------------------------------*
//RACSPT   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION RACSPT
)ENDSEL
)SEL &REC = 909  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  User attributes
//*-------------------------------------------------------------------*
//RACUSR   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION RACUSR
)ENDSEL
)SEL &REC = 910  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  Link List datasets
//*-------------------------------------------------------------------*
//SYSLNK   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION SYSLNK
)ENDSEL
)SEL &REC = 911  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  APF datasets
//*-------------------------------------------------------------------*
//SYSAPF   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION SYSAPF
)ENDSEL
)SEL &REC = 912  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  Master and user catalogs
//*-------------------------------------------------------------------*
//SYSCAT   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION SYSCAT
)ENDSEL
)SEL &REC = 913  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  Primary and backup datbases
//*-------------------------------------------------------------------*
//RACDST   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION RACDST
)ENDSEL
)SEL &REC = 914  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  System datasets
//*-------------------------------------------------------------------*
//SYSSDS   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION SYSSDS
)ENDSEL
)SEL &REC = 915  | &REC = ALL
//*-------------------------------------------------------------------*
//* Program: Data Security Monitor (DSMON)
//* Report:  User datasets
//* Note:    To obtain data on a specific dataset, add the below
//*          SYSIN card after/under the 'FUNCTION USRDSN' card
//*            USEROPT USRDSN data_set_name
//*-------------------------------------------------------------------*
//USRDSN   EXEC PGM=ICHDSM00
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  SYSOUT=*
//SYSIN    DD  *
  FUNCTION USRDSN
)ENDSEL
)ENDSEL
)ENDDOT
